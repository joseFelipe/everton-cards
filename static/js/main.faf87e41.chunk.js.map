{"version":3,"sources":["index.js"],"names":["cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","concat","render","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_useState","useState","Set","gone","Object","_Users_felipesilva_Documents_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","_useSprings","useSprings","length","_Users_felipesilva_Documents_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_useSprings2","props","set","bind","useGesture","_ref","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","_ref2","react_spring__WEBPACK_IMPORTED_MODULE_4__","div","key","style","transform","interpolate","assign","backgroundImage","document","getElementById"],"mappings":"uJAMMA,SAAQ,CACZ,iDACA,iDACA,iDACA,iDACA,iDACA,mDAIIC,EAAK,SAAAC,GAAC,MAAK,CACfC,EAAG,EACHC,GAAQ,EAALF,EACHG,MAAO,EACPC,IAA2B,GAAhBC,KAAKC,SAAV,GACNC,MAAW,IAAJP,IAEHQ,EAAO,SAAAR,GAAC,MAAK,CAAEC,EAAG,EAAGG,IAAK,EAAGD,MAAO,IAAKD,GAAI,MAE7CO,EAAQ,SAACC,EAAGC,GAAJ,oDAAAC,OACkCF,EAC5C,GAFU,iBAAAE,OAEQF,EAFR,eAAAE,OAEuBD,EAFvB,MA6DdE,iBAAOC,EAAAC,EAAAC,cAzDP,WAAgB,IAAAC,EACCC,mBAAS,kBAAM,IAAIC,MAA3BC,EADOC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,MAAAM,EAEOC,YAAW1B,EAAM2B,OAAQ,SAAAzB,GAAC,OAAAqB,OAAAK,EAAA,EAAAL,CAAA,GAC1CtB,EAAGC,GADuC,CAE7CQ,KAAMA,EAAKR,OAJC2B,EAAAN,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEPK,EAFOD,EAAA,GAEAE,EAFAF,EAAA,GAORG,EAAOC,YACX,SAAAC,GAOM,IANGC,EAMHZ,OAAAC,EAAA,EAAAD,CAAAW,EANJE,KAMI,MALJC,EAKIH,EALJG,KACQC,EAIJf,OAAAC,EAAA,EAAAD,CAAAW,EAJJK,MAII,MAFQC,GAERN,EAHJO,SAGIlB,OAAAC,EAAA,EAAAD,CAAAW,EAFJQ,UAEI,OADJC,EACIT,EADJS,SAGMC,EAAMJ,EAAO,GAAK,EAAI,GACvBH,GAFWM,EAAW,IAELrB,EAAKuB,IAAIV,GAC/BJ,EAAI,SAAA7B,GACF,GAAIiC,IAAUjC,EAAd,CACA,IAAM4C,EAASxB,EAAKyB,IAAIZ,GAIxB,MAAO,CACLhC,EAJQ2C,GAAU,IAAME,OAAOC,YAAcL,EAAMP,EAAOC,EAAS,EAKnEhC,IAJUgC,EAAS,KAAOQ,EAAe,GAANF,EAAWD,EAAW,GAKzDtC,MAJYgC,EAAO,IAAM,EAKzB5B,WAAOyC,EACPC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,SAG5DT,GAAQf,EAAKgC,OAAStD,EAAM2B,QAC/B4B,WAAW,kBAAMjC,EAAKkC,SAAWzB,EAAI,SAAA7B,GAAC,OAAID,EAAGC,MAAK,OAIxD,OAAO4B,EAAM2B,IAAI,SAAAC,EAAuBxD,GAAvB,IAAGC,EAAHuD,EAAGvD,EAAGC,EAANsD,EAAMtD,EAAGE,EAAToD,EAASpD,IAAKD,EAAdqD,EAAcrD,MAAd,OACfW,EAAAC,EAAAC,cAACyC,EAAA,EAASC,IAAV,CACEC,IAAK3D,EACL4D,MAAO,CACLC,UAAWC,YAAY,CAAC7D,EAAGC,GAAI,SAACD,EAAGC,GAAJ,qBAAAU,OAAyBX,EAAzB,OAAAW,OAAgCV,EAAhC,aAIjCY,EAAAC,EAAAC,cAACyC,EAAA,EAASC,IAAVrC,OAAA0C,OAAA,GACMjC,EAAK9B,GADX,CAEE4D,MAAO,CACLC,UAAWC,YAAY,CAAC1D,EAAKD,GAAQM,GACrCuD,gBAAe,OAAApD,OAASd,EAAME,GAAf,aAOlB,MAAUiE,SAASC,eAAe","file":"static/js/main.faf87e41.chunk.js","sourcesContent":["import { render } from \"react-dom\";\nimport React, { useState } from \"react\";\nimport { useSprings, animated, interpolate } from \"react-spring\";\nimport { useGesture } from \"react-use-gesture\";\nimport \"./styles.css\";\n\nconst cards = [\n  \"http://alternativeagencia.com.br/everton/1.jpg\",\n  \"http://alternativeagencia.com.br/everton/2.jpg\",\n  \"http://alternativeagencia.com.br/everton/3.jpg\",\n  \"http://alternativeagencia.com.br/everton/4.jpg\",\n  \"http://alternativeagencia.com.br/everton/6.jpg\",\n  \"http://alternativeagencia.com.br/everton/5.jpg\"\n];\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 });\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\n    10}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck() {\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({\n    ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n      const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n      if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n      set(i => {\n        if (index !== i) return; // We're only interested in changing spring-data for the current spring\n        const isGone = gone.has(index);\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n        const scale = down ? 1.1 : 1; // Active cards lift up a bit\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n      if (!down && gone.size === cards.length)\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  );\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div\n      key={i}\n      style={{\n        transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n      }}\n    >\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div\n        {...bind(i)}\n        style={{\n          transform: interpolate([rot, scale], trans),\n          backgroundImage: `url(${cards[i]})`\n        }}\n      />\n    </animated.div>\n  ));\n}\n\nrender(<Deck />, document.getElementById(\"root\"));\n"],"sourceRoot":""}